from mesa import Model, Agent
from mesa.time import SimultaneousActivation
from mesa.space import MultiGrid
from mesa.visualization.modules import CanvasGrid
from mesa.visualization.ModularVisualization import ModularServer
from Modelo import ModeloTrafico
from Agentes import Vehiculo, Peaton, Celda, SemaforoVehicular, SemaforoPeatonal


intransitables = [(20, 20), (20, 30), (20, 60), (20, 70), (20, 120), (20, 130), (20, 150), (20, 160), (20, 170), (20, 180), (20, 190), (20, 200), (20, 210), (30, 20), (30, 30), (30, 70), (30, 120), (30, 130), (30, 140), (30, 150), (30, 160), (30, 170), (30, 180), (30, 190), (30, 200), (40, 20), (40, 60), (40, 70), (40, 130), (40, 140), (40, 150), (40, 160), (40, 170), (40, 180), (40, 190), (40, 200), (40, 210), (50, 20), (50, 30), (50, 60), (50, 70), (50, 120), (50, 130), (50, 140), (50, 150), (50, 160), (50, 180), (50, 190), (50, 200), (50, 210), (80, 20), (80, 30), (80, 60), (80, 70), (80, 120), (80, 130), (80, 140), (80, 160), (80, 190), (80, 200), (80, 210), (90, 30), (90, 60), (90, 70), (90, 120), (90, 130), (90, 140), (90, 150), (90, 160), (90, 190), (90, 200), (90, 210), (100, 20), (100, 30), (100, 60), (100, 130), (100, 140), (100, 150), (100, 160), (100, 200), (100, 210), (110, 20), (110, 30), (110, 60), (110, 70), (110, 120), (110, 130), (110, 140), (110, 150), (110, 160), (110, 190), (110, 200), (110, 210), (130, 90), (130, 100), (140, 90), (140, 100), (160, 20), (160, 30), (160, 40), (160, 50), (160, 60), (160, 70), (160, 120), (160, 130), (160, 140), (160, 150), (160, 180), (160, 190), (160, 200), (160, 210), (170, 20), (170, 30), (170, 50), (170, 70), (170, 120), (170, 130), (170, 140), (170, 150), (170, 180), (170, 190), (170, 200), (180, 120), (180, 130), (180, 140), (180, 150), (180, 180), (180, 190), (180, 200), (180, 210), (190, 120), (190, 130), (190, 140), (190, 150), (190, 180), (190, 190), (190, 200), (190, 210), (200, 20), (200, 30), (200, 50), (200, 60), (200, 70), (200, 120), (200, 130), (200, 140), (200, 190), (200, 200), (200, 210), (210, 20), (210, 30), (210, 40), (210, 50), (210, 60), (210, 70), (210, 120), (210, 130), (210, 140), (210, 150), (210, 180), (210, 190), (210, 200), (210, 210)]

transitables = {'N': [(150, 210), (60, 180), (230, 40), (70, 170), (220, 20), (230, 10), (60, 150), (220, 110), (230, 100), (140, 70), (220, 200), (230, 190), (220, 170), (140, 160), (140, 130), (150, 50), (180, 40), (150, 140), (60, 200), (220, 40), (70, 190), (230, 30), (60, 170), (150, 200), (220, 130), (230, 120), (220, 100), (230, 210), (220, 190), (190, 20), (140, 180), (140, 150), (150, 70), (180, 30), (150, 160), (60, 130), (70, 120), (220, 60), (70, 210), (220, 30), (230, 50), (60, 190), (140, 20), (70, 180), (220, 120), (230, 140), (190, 40), (220, 210), (230, 200), (140, 170), (150, 90), (180, 50), (150, 180), (70, 140), (150, 150), (60, 120), (220, 80), (230, 70), (220, 50), (140, 40), (60, 210), (70, 200), (230, 160), (220, 140), (230, 130), (190, 60), (230, 220), (140, 190), (190, 30), (150, 20), (150, 110), (180, 70), (70, 160), (230, 0), (150, 170), (60, 140), (70, 130), (230, 90), (220, 70), (140, 60), (230, 60), (140, 30), (230, 180), (220, 160), (230, 150), (140, 120), (140, 210), (220, 220), (190, 50), (150, 40), (150, 130), (150, 100), (180, 60), (150, 190), (60, 160), (230, 20), (70, 150), (230, 110), (220, 90), (230, 80), (140, 50), (220, 180), (230, 170), (140, 140), (220, 150), (190, 70), (140, 200), (150, 60), (180, 20), (150, 30), (150, 120)], 'O': [(180, 170), (210, 160), (200, 230), (50, 40), (210, 220), (50, 100), (140, 220), (30, 220), (80, 180), (90, 170), (20, 110), (130, 110), (110, 110), (110, 230), (90, 230), (160, 160), (60, 110), (70, 100), (180, 100), (150, 230), (160, 220), (200, 160), (200, 220), (80, 110), (190, 110), (90, 100), (170, 230), (40, 230), (20, 40), (190, 170), (80, 170), (20, 100), (100, 230), (110, 220), (60, 100), (150, 220), (210, 170), (30, 110), (140, 110), (40, 100), (50, 50), (230, 230), (120, 230), (170, 160), (190, 100), (50, 230), (80, 100), (170, 220), (90, 180), (100, 220), (160, 170), (200, 110), (210, 100), (70, 230), (180, 230), (30, 40), (200, 170), (30, 100), (220, 230), (120, 220), (90, 110), (20, 50), (50, 220), (100, 180), (110, 170), (160, 100), (20, 230), (130, 230), (180, 160), (200, 100), (60, 230), (40, 50), (70, 220), (180, 220), (170, 110), (40, 110), (170, 170), (100, 110), (110, 100), (190, 230), (80, 230), (90, 220), (100, 170), (10, 230), (20, 220), (130, 220), (120, 110), (210, 110), (30, 50), (60, 220), (40, 40), (210, 230), (50, 110), (170, 100), (30, 230), (140, 230), (40, 220), (10, 220), (190, 160), (70, 110), (100, 100), (190, 220), (80, 220), (110, 180), (180, 110), (160, 110), (160, 230)], 'S': [(120, 40), (120, 100), (120, 190), (0, 50), (130, 20), (0, 140), (10, 90), (0, 110), (0, 230), (70, 40), (60, 20), (10, 180), (0, 200), (130, 170), (10, 150), (120, 30), (120, 120), (120, 210), (120, 180), (0, 70), (130, 40), (10, 20), (0, 40), (0, 160), (10, 110), (0, 130), (10, 80), (130, 180), (60, 40), (10, 200), (70, 30), (130, 190), (10, 170), (0, 220), (120, 50), (120, 140), (120, 200), (0, 90), (10, 40), (0, 60), (130, 30), (10, 130), (0, 150), (130, 120), (10, 100), (60, 60), (70, 50), (130, 210), (10, 190), (60, 30), (120, 70), (120, 160), (120, 130), (0, 20), (10, 60), (0, 80), (130, 50), (10, 30), (0, 170), (130, 140), (10, 120), (70, 70), (10, 210), (60, 50), (130, 200), (120, 90), (120, 60), (120, 150), (0, 10), (0, 100), (130, 70), (10, 50), (0, 190), (130, 160), (10, 140), (130, 130), (60, 70), (70, 60), (120, 20), (120, 80), (120, 170), (10, 10), (0, 30), (0, 120), (10, 70), (130, 60), (70, 20), (10, 160), (0, 180), (0, 210), (130, 150)], 'E': [(40, 0), (120, 10), (40, 90), (50, 10), (80, 0), (190, 0), (80, 90), (190, 90), (90, 80), (110, 50), (10, 0), (20, 80), (130, 80), (70, 10), (180, 10), (210, 0), (210, 90), (60, 80), (30, 0), (140, 0), (30, 90), (40, 80), (180, 80), (90, 10), (190, 80), (100, 50), (80, 80), (20, 10), (130, 10), (160, 0), (160, 90), (200, 0), (200, 90), (210, 80), (40, 10), (30, 80), (140, 80), (80, 40), (110, 0), (0, 0), (80, 10), (190, 10), (110, 90), (150, 0), (160, 80), (210, 10), (200, 80), (30, 10), (170, 0), (140, 10), (170, 90), (90, 50), (100, 0), (100, 90), (110, 80), (160, 10), (150, 80), (220, 10), (200, 10), (120, 0), (50, 0), (50, 90), (170, 80), (110, 40), (80, 50), (90, 40), (110, 10), (100, 80), (60, 10), (70, 0), (180, 0), (150, 10), (70, 90), (180, 90), (220, 0), (90, 0), (170, 10), (90, 90), (50, 80), (100, 40), (100, 10), (130, 0), (20, 0), (20, 90), (60, 0), (60, 90), (70, 80)]}

banquetas = [(20, 20), (30, 20), (40, 20), (50, 20), (50, 30), (20, 30), (20, 60), (20, 70), (20, 70), (30, 70), (40, 70), (50, 70), (50, 60), (80, 20), (100, 20), (110, 20), (80, 30), (110, 30), (80, 60), (80, 70), (90, 70), (110, 70), (110, 60), (20, 120), (30, 120), (50, 120), (20, 130), (20, 150), (20, 160), (20, 170), (20, 180), (20, 190), (20, 200), (20, 210), (40, 210), (50, 210), (50, 200), (50, 190), (50, 180), (50, 160), (50, 150), (50, 140), (50, 130), (50, 120), (80, 120), (90, 120), (110, 120), (80, 130), (80, 140), (80, 160), (90, 160), (100, 160), (110, 160), (110, 150), (110, 140), (110, 130), (110, 120), (80, 190), (90, 190), (110, 190), (110, 200), (110, 210), (100, 210), (90, 210), (80, 210), (80, 200), (160, 120), (170, 120), (180, 120), (190, 120), (200, 120), (210, 120), (210, 130), (210, 140), (210, 150), (190, 150), (180, 150), (170, 150), (160, 150), (160, 140), (160, 130), (160, 180), (170, 180), (180, 180), (190, 180), (210, 180), (210, 190), (210, 200), (210, 210), (200, 210), (190, 210), (180, 210), (160, 210), (160, 200), (160, 190)]

estacionamientos = {'A': (30, 210), 'B': (170, 210), 'C': (100, 190), 'D': (50, 170), 'E': (200, 180), 'F': (80, 150), 'G': (200, 150), 'H': (20, 140), 'I': (40, 120), 'J': (100, 120), 'K': (100, 70), 'L': (30, 60), 'M': (170, 60), 'N': (40, 30), 'O': (170, 40), 'P': (200, 40), 'Q': (200, 40), 'R': (90, 20)}

semaforosV = {'H': [(0, 60), (10, 60), (60, 20), (70, 20), (180, 70), (190, 70), (60, 160), (70, 160), (60, 210), (70, 210)], 
              'V': [(20, 40), (20, 50), (50, 0), (50, 10), (80, 170), (80, 180), (80, 220), (80, 230), (170, 80), (170, 90)]}

semaforosP = [(20, 30), (80, 20), (200, 70), (50, 160), (50, 210), (80, 190)]

def agentPortrayal(agent):
    """Función de representación de los agentes."""
    if isinstance(agent, Celda):
        return {
            "Shape": "rect",
            "Filled": "true",
            "Layer": agent.layer,  # Define la capa del agente
            "Color": agent.color,  # Utiliza el color definido en el agente
            "w": 10,  # Ancho de la celda
            "h": 10  # Alto de la celda
        }
    elif isinstance(agent, Peaton):
        return {
            "Shape": "circle",
            "Filled": "true",
            "Layer": 7,
            "Color": "black",
            "r": 5  # Radio del círculo para el peatón
        }
    elif isinstance(agent, Vehiculo):
        return {
            "Shape": "circle",
            "Filled": "true",
            "Layer": 8,
            "Color": "purple",
            "r": 5  # Radio del círculo para el peatón
        }
    elif isinstance(agent, SemaforoVehicular):
        color = {
            "verde":"green",
            "amarillo":"yellow",
            "rojo":"red"
        }[agent.state]
        return{
            "Shape": "rect",
            "Filled": "true",
            "Layer": 6,  
            "Color": color, 
            "w": 10, 
            "h": 10 
        }
    elif isinstance(agent, SemaforoPeatonal):
        color = "green" if agent.estado == "verde" else "red"
        return {
            "Shape":"rect",
            "Filled":"true",
            "Layer":6,
            "Color":color,
            "w":5,
            "h":5
        }


# Crear el modelo y configurar el servidor
canvas_element = CanvasGrid(agentPortrayal, 240, 240, 500, 500)
model_params = {
    "width": 240,
    "height": 240,
    "semaforosV": semaforosV,
    "semaforosP": semaforosP,
    "transitables": transitables,
    "intransitables": intransitables,
    "banquetas": banquetas,
    "estacionamientos": estacionamientos
}
server = ModularServer(ModeloTrafico, [canvas_element], "Traffic Simulation", model_params)
server.port = 8522
server.launch()

print("Se realizó el pull")